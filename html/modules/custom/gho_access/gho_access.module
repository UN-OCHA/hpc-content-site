<?php

/**
 * @file
 * GHO access module file.
 */

use Drupal\Core\Session\AccountInterface;
use Drupal\Core\Entity\EntityInterface;
use Drupal\Core\Form\FormStateInterface;
use Drupal\Core\Access\AccessResult;
use Drupal\block\BlockInterface;
use Drupal\media\MediaInterface;
use Drupal\node\NodeInterface;
use Drupal\taxonomy\TermInterface;
use Drupal\paragraphs\Entity\Paragraph;

/**
 * Implements hook_node_access().
 *
 * Deny view access to users without the view published 'node bundle' content
 * permission.
 */
function gho_access_node_access(NodeInterface $node, $operation, AccountInterface $account) {
  $type = $node->bundle();
  $published = $node->isPublished();

  switch ($operation) {
    case 'view':
      if ($published && !$account->hasPermission("view published {$type} content")) {
        return AccessResult::forbidden()->cachePerPermissions();
      }
      // Check the access to the translation.
      return gho_access_check_node_language_access($node, $account);
  }
  // No opinion, let other modules handle the permissions.
  return AccessResult::neutral();
}

/**
 * Implements hook_media_access().
 *
 * Deny view access to users without the view published 'media bundle' content
 * permission.
 */
function gho_access_media_access(MediaInterface $media, $operation, AccountInterface $account) {
  $type = $media->bundle();
  $published = $media->isPublished();

  switch ($operation) {
    case 'view':
      if ($published && !$account->hasPermission("view published {$type} media")) {
        return AccessResult::forbidden()->cachePerPermissions();
      }
      // Check the access to the translation.
      return gho_access_check_media_language_access($media, $account);
  }
  // No opinion, let other modules handle the permissions.
  return AccessResult::neutral();
}

/**
 * Implements hook_paragraph_access().
 */
function gho_access_paragraph_access(Paragraph $paragraph, $operation, AccountInterface $account) {
  switch ($operation) {
    case 'view':
      // Check the access to the translation.
      return gho_access_check_language_access($account, $paragraph);
  }
  // No opinion, let other modules handle the permissions.
  return AccessResult::neutral();
}

/**
 * Implements hook_taxonomy_term_access().
 *
 * Deny view access to users without the view published 'media bundle' content
 * permission.
 */
function gho_access_taxonomy_term_access(TermInterface $term, $operation, AccountInterface $account) {
  switch ($operation) {
    case 'view':
      // Skip the needs and requirements because they are not translatable
      // and the figures are automatically translated by the GhoNumberFormatter
      // provided in gho_fields.
      if ($term->bundle() !== 'needs_and_requirements') {
        // Check the access to the translation.
        return gho_access_check_language_access($account, $term);
      }
  }
  // No opinion, let other modules handle the permissions.
  return AccessResult::neutral();
}

/**
 * Implements hook_form_FORM_ID_alter() for 'user_form'.
 *
 * Change permission to assign roles.
 *
 * @see Drupal\user\AccountForm::form()
 */
function gho_access_form_user_form_alter(&$form, FormStateInterface $form_state, $form_id) {
  // Allow managing the account roles if there are roles and the current user
  // has the correct permission.
  $roles_access = !empty($form['account']['roles']['#options']) &&
                  \Drupal::currentUser()->hasPermission('assign user roles');
  $form['account']['roles']['#access'] = $roles_access;
}

/**
 * Implements  hook_block_access().
 *
 * Hide the main menu if the language visibility for the current language is
 * not enabled.
 */
function gho_access_block_access(BlockInterface $block, $operation, AccountInterface $account) {
  if ($operation === 'view' && $block->id() === 'mainnavigation') {
    return gho_access_check_language_access($account);
  }

  // No opinion, let other modules handle the permissions.
  return AccessResult::neutral();
}

/**
 * Check if an account is allowed to view a node in the current language.
 *
 * @param \Drupal\node\NodeInterface $node
 *   Node to check access for.
 * @param \Drupal\Core\Session\AccountInterface $account
 *   User account.
 *
 * @return \Drupal\Core\Access\AccessResult
 *   Access result: either neutral if the account is allowed to access the
 *   content or forbidden otherwise.
 */
function gho_access_check_node_language_access(NodeInterface $node, AccountInterface $account) {
  // Skip access for the homepage or the node corresponding to the current
  // request because its access is checked at the route level.
  //
  // @see Drupal\gho_access\Access\GhoLanguageVisibilityAccessCheck::access()
  $nid = \Drupal::service('current_route_match')->getRawParameter('node');
  if ($nid == $node->id()) {
    // Let other module decide the access to the node.
    return AccessResult::neutral();
  }

  return gho_access_check_language_access($account, $node);
}

/**
 * Check if an account is allowed to view a node in the current language.
 *
 * @param \Drupal\media\MediaInterface $media
 *   Media to check access for.
 * @param \Drupal\Core\Session\AccountInterface $account
 *   User account.
 *
 * @return \Drupal\Core\Access\AccessResult
 *   Access result: either neutral if the account is allowed to access the
 *   content or forbidden otherwise.
 */
function gho_access_check_media_language_access(MediaInterface $media, AccountInterface $account) {
  $route_match = \Drupal::service('current_route_match');

  // We want to show the hero image on the homepage even if it's not promoted.
  $skip_homepage_check = FALSE;
  if ($route_match->getRawParameter('node') == 1) {
    $node = $route_match->getParameter('node');
    $skip_homepage_check = $node->field_hero_image->target_id == $media->id();
  }

  return gho_access_check_language_access($account, $media, $skip_homepage_check);
}

/**
 * Check if an account is allowed to view content in the current language.
 *
 * @param \Drupal\Core\Session\AccountInterface $account
 *   User account.
 * @param \Drupal\Core\Entity\EntityInterface|null $entity
 *   Optional entity to compare its language with the current language.
 * @param bool $skip_homepage_check
 *   Skip the homepage check.
 *
 * @return \Drupal\Core\Access\AccessResult
 *   Access result: either neutral if the account is allowed to access the
 *   content or forbidden otherwise.
 */
function gho_access_check_language_access(AccountInterface $account, ?EntityInterface $entity = NULL, $skip_homepage_check = FALSE) {
  // Get the current language.
  $langcode = \Drupal::service('language_manager')->getCurrentLanguage()->getId();

  // Do not deny access if the user has the permission to view any content
  // regardless of the status if its translation.
  if ($account->hasPermission('view untranslated content')) {
    // We let other modules decide the access to the entity.
    $access = AccessResult::neutral();
  }
  // If there is a mismatch between the current language and the entity language
  // we deny access.
  elseif (isset($entity) && $entity->language()->getId() !== $langcode) {
    $access = AccessResult::forbidden();
  }
  // If we don't need to check the homepage then simply let the other modules
  // decide the access to the entity.
  elseif ($skip_homepage_check === TRUE) {
    $access = AccessResult::neutral();
  }
  // Otherwise we check if the visibility for the language is enabled by
  // looking at the status of the homepage in that language.
  elseif (gho_access_check_language_visibility($langcode)) {
    // We let other modules decide the access to the entity but we also make
    // sure to clear the cache when the homepage is changed.
    $access = AccessResult::neutral()->addCacheTags(['node:1']);
  }
  // If the homepage in the language doesn't exist or doesn't match the
  // criteria, then we disallow access.
  else {
    // We deny access but we also make sure to clear the cache when the homepage
    // is changed.
    $access = AccessResult::forbidden()->addCacheTags(['node:1']);
  }

  // Ensure the cache is cleared when the permissions change.
  $access->cachePerPermissions();

  // If an entity was provided, add it as a cache dependency as the availability
  // of its translation would impact the access result.
  if (isset($entity)) {
    $access->addCacheableDependency($entity);
  }
  return $access;
}

/**
 * Determine the language visibility from the homepage status.
 *
 * @param string $langcode
 *   Language code to check.
 *
 * @return bool
 *   Whether the homepage in the given language matches the conditions
 *   (exists, published and promoted) to allow visibility of the language to
 *   anonymous users.
 */
function gho_access_check_language_visibility($langcode) {
  static $allowed = [];

  // Check if there is homepage matching the conditions and store the result
  // to avoid excessive queries as this can be called elsewhere.
  if (!isset($allowed[$langcode])) {
    $storage = \Drupal::service('entity_type.manager')->getStorage('node');
    $ids = $storage->getQuery()
      ->condition('nid', 1)
      ->condition('langcode', $langcode)
      ->condition('status', NodeInterface::PUBLISHED)
      ->condition('promote', NodeInterface::PROMOTED)
      ->accessCheck(TRUE)
      ->execute();
    $allowed[$langcode] = !empty($ids);
  }

  return $allowed[$langcode];
}

/**
 * Implements hook_language_switch_links_alter().
 *
 * Remove links from the language switcher for languages whose global visibility
 * is not enabled. If there is less than 2 enabled languages (ex: only English),
 * we don't display the language switcher (by unsetting all the links).
 */
function gho_access_language_switch_links_alter(?array &$links, $type, $path) {
  if (isset($links)) {
    foreach ($links as $langcode => $link) {
      if (!gho_access_check_language_visibility($langcode)) {
        unset($links[$langcode]);
      }
    }
    if (count($links) <= 1) {
      // We need to unset the links for the Language Switcher block to actually
      // not be displayed.
      // @see Drupal\language\Plugin\Block\LanguageBlock::build()
      $links = NULL;
    }
  }
}

/**
 * Implements hook_module_implements_alter().
 *
 * Ensure our hook_language_fallback_candidates_view_alter() runs last.
 */
function gho_access_module_implements_alter(&$implementations, $hook) {
  if ($hook === 'language_fallback_candidates_entity_view_alter') {
    $group = $implementations['gho_access'];
    unset($implementations['gho_access']);
    $implementations['gho_access'] = $group;
  }
}

/**
 * Implements hook_language_fallback_candidates_entity_view_alter().
 *
 * This ensures we always try first the candidate for the current language
 * even for anonymous users that don't have the `Translate` permissions.
 *
 * This means that if a media for example doesn't have a French translation
 * when viewing a page in French that uses that media, then it will not be
 * displayed.
 *
 * This also means that if a paragraph is "not published" for the translation
 * in the current language, it will not be displayed to anonymous users.
 *
 * @see content_translation_language_fallback_candidates_entity_view_alter()
 */
function gho_access_language_fallback_candidates_entity_view_alter(array &$candidates, array $context) {
  $langcode = \Drupal::service('language_manager')->getCurrentLanguage()->getId();
  $candidates = [$langcode => $langcode] + $candidates;
}
