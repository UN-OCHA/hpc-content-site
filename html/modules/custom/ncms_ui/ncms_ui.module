<?php

/**
 * @file
 * NCMS UI module file.
 */

use Drupal\Component\Serialization\Json;
use Drupal\Core\Form\FormStateInterface;
use Drupal\Core\Url;
use Drupal\ncms_ui\Controller\ViewController;

/**
 * Implements template_preprocess_html().
 */
function ncms_ui_preprocess_html(&$variables) {
  // Hide admin toolbar.
  $route_name = \Drupal::routeMatch()->getRouteName();
  $routes = [
    'entity.node.standalone',
    'entity.node.preview',
  ];
  if (in_array($route_name, $routes)) {
    if (!empty($variables['page_top']['toolbar'])) {
      unset($variables['page_top']['toolbar']);
    }
    if (!empty($variables['attributes']['class'])) {
      $variables['attributes']['class'] = array_filter($variables['attributes']['class'], function ($value) {
        return strpos($value, 'toolbar-') !== 0;
      });
    }
  }
}

/**
 * Implements hook_local_tasks_alter().
 */
function ncms_ui_local_tasks_alter(&$local_tasks) {
  unset($local_tasks['entity.node.canonical']);
}

/**
 * Implements hook_preprocess_page().
 */
function ncms_ui_preprocess_page(&$variables) {
  // Not technically necessary, but by attaching these 2 libraries, we will get
  // the same outline look of the modal dialogs (specifically when it comes to
  // the outer borders) for the node preview (coming from the node edit form)
  // and the node view in modal (coming from the admin content listing).
  $variables['#attached']['library'][] = 'core/jquery.ui.autocomplete';
  $variables['#attached']['library'][] = 'core/drupal.dialog';
}

/**
 * Implements hook_form_FORM_ID_alter().
 */
function ncms_ui_form_node_preview_form_select_alter(&$form, FormStateInterface $form_state) {
  // Disable the view mode selection on the node previews. All we want to see
  // is the full page preview.
  $form['#access'] = FALSE;
}

/**
 * Implements hook_form_FORM_ID_alter().
 */
function ncms_ui_form_node_article_edit_form_alter(&$form, FormStateInterface $form_state) {
  /** @var \Drupal\node\NodeInterface $node */
  $node = $form_state->getFormObject()->getEntity();

  foreach (array_keys($form['actions']) as $action) {
    // Add our own submit handlers to redirect to the front page after saving a
    // node, which is set to be /admin/content.
    if ($action != 'preview' && isset($form['actions'][$action]['#type']) && $form['actions'][$action]['#type'] === 'submit') {
      $form['actions'][$action]['#submit'][] = 'ncms_ui_node_article_edit_form_submit';
    }
  }
  // Change the behavior of the preview button to show the node preview in a
  // modal using an iframe.
  $form['actions']['preview']['#attributes']['class'][] = 'use-ajax';
  $form['actions']['preview']['#ajax'] = [
    'callback' => [ViewController::class, 'previewModal'],
    'event' => 'click',
  ];

  // Add a cancel link. This either redirects to the publisher site if this
  // request came from an external publisher, or to a url given in the
  // destination query argument, or, as a fallback, to the main content
  // overview page.
  /** @var \Drupal\ncms_publisher\PublisherManager $publisher_manager */
  $publisher_manager = \Drupal::service('ncms_publisher.publisher.manager');
  $publisher_redirect = $publisher_manager->getCurrentRedirectUrl();

  // Take the destination only if it's not pointing to the current edit page.
  $current_destination = \Drupal::destination()->get();
  $destination_redirect = $current_destination != $node->toUrl('edit-form')->toString() ? $current_destination : NULL;

  // Set the redirect url. Publishers have priority, otherwise take the
  // destination if it's available.
  $redirect_url = $publisher_redirect ? Url::fromUri($publisher_redirect) : NULL;
  if (!$redirect_url && $destination_redirect) {
    $redirect_url = url::fromUserInput($destination_redirect);
  }
  // And if we still don't have a valid redirect, use the fallback.
  if (!$redirect_url) {
    $redirect_url = Url::fromRoute('view.content.page_all_content');
  }
  $form['actions']['cancel'] = [
    '#type' => 'link',
    '#title' => t('Cancel'),
    '#url' => $redirect_url,
    '#weight' => 20,
  ];
}

/**
 * Custom submit function for the node article edit form.
 *
 * Checks if the edit request came from a trusted publisher, if not the user
 * will be redirected to the front page.
 */
function ncms_ui_node_article_edit_form_submit($form, FormStateInterface $form_state) {
  /** @var \Drupal\ncms_publisher\PublisherManager $publisher_manager */
  $publisher_manager = \Drupal::service('ncms_publisher.publisher.manager');
  if (!$publisher_manager->getCurrentPublisher()) {
    $form_state->setRedirectUrl(Url::fromUserInput('/'));
  }
}

/**
 * Implements hook_link_alter().
 */
function ncms_ui_link_alter(&$variables) {
  /** @var \Drupal\Core\Url $url */
  $url = $variables['url'];
  if ($url->isRouted() && $url->getRouteName() == 'entity.node.canonical') {
    /** @var \Drupal\node\NodeInterface $node */
    $node = \Drupal::entityTypeManager()->getStorage('node')->load($url->getRouteParameters()['node']);
    $variables['options']['attributes']['title'] = t('Show a preview of this @bundle', [
      '@bundle' => strtolower(\Drupal::entityTypeManager()->getStorage('node_type')->load($node->bundle())->label()),
    ]);
    $variables['options']['attributes']['class'][] = 'use-ajax';
    $variables['options']['attributes']['data-dialog-type'] = 'modal';
    $variables['options']['attributes']['data-dialog-options'] = Json::encode([
      'width' => '80%',
      'title' => t('Preview: @title', ['@title' => $variables['text']]),
      'dialogClass' => 'node-preview',
    ]);
    $variables['url'] = Url::fromRoute('entity.node.iframe', ['node' => $node->id()]);
    $variables['#attached']['library'] = ['ncms_ui/node_preview'];
  }
}
