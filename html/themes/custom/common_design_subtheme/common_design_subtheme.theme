<?php

/**
 * @file
 * Theme preprocessors.
 */

use Drupal\common_design_subtheme\AddComponentClasses;
use Drupal\Core\Menu\MenuTreeParameters;
use Drupal\Core\Template\Attribute;
use Drupal\Core\Url;
use Drupal\node\NodeInterface;

/**
 * Implements hook_menu().
 */
function common_design_subtheme_theme() {
  return [
    'menu__page_not_found' => [
      'base hook' => 'menu',
    ],
  ];
}

/**
 * Get the list of components to attach to formatted text fields.
 *
 * @return array
 *   Array with component libraries as keys and list of tags and classes to
 *   add as values.
 */
function common_design_subtheme_get_components() {
  static $components = [
    'common_design/cd-table' => [
      'table' => ['cd-table', 'cd-table--striped', 'cd-table--responsive'],
    ],
  ];
  return $components;
}

/**
 * Implements hook_preprocess().
 */
function common_design_subtheme_preprocess(&$variables) {
  $variables['base_path'] = base_path();
}

/**
 * Implements hook_preprocess_field().
 *
 * This adds attach component libraries and add necessary classes to filtered
 * text field.
 *
 * Note: other possibilities:
 * - Target specific fields: `$variables['element']['#field_name']`.
 * - Target view mode: `$variables['element']['#view_mode']`.
 *
 * Note: we could also add the #post_render and libraries to all the
 * "processed_text" elements via a hook_element_info_alter().
 *
 * @todo Do we need to alter the cache somehow?
 *
 * @see template_preprocess_field()
 */
function common_design_subtheme_preprocess_field(&$variables) {
  switch ($variables['element']['#formatter']) {
    case 'text_summary_or_trimmed':
    case 'text_trimmed':
    case 'text_default':
      foreach ($variables['items'] as $key => $item) {
        $variables['items'][$key]['content']['#post_render'][] =
        [AddComponentClasses::class, 'add'];
      }
      foreach (common_design_subtheme_get_components() as $component => $dummy) {
        $variables['#attached']['library'][] = $component;
      }
      break;
  }

  // Add CD Button classes to field_link within download_button Paragraph type.
  if ($variables['element']['#field_name'] == 'field_link' && $variables['element']['#object']->getType() === 'download_button') {
    $variables['items'][0]['content']['#options']['attributes']['class'][] = 'cd-button cd-button--bold cd-button--uppercase';

    // If no Link text was supplied, a URL will be in the title. In that case,
    // we set a default value "Download report".
    $has_url_in_title = strpos($variables['items'][0]['content']['#title'], 'http');
    if ($has_url_in_title !== FALSE && $has_url_in_title >= 0) {
      $variables['items'][0]['content']['#title'] = t('Download report');
    }
  }
}

/**
 * Implements hook_theme_suggestions_HOOK().
 */
function common_design_subtheme_theme_suggestions_field(array $variables) {
  $suggestions = [];
  $element = $variables['element'];

  $suggestions[] = 'field__' . $element['#entity_type'] . '__' . $element['#field_name'] . '__' . $element['#bundle'] . '__' . $element['#view_mode'];

  return $suggestions;
}

/**
 * Implements hook_preprocess_node().
 *
 * Use the page title block for the title and display the local tasks below it.
 * We use common_design_subtheme_get_block_render_array() that will cache the
 * render array of the blocks so that they are not re-rendered and displayed
 * again.
 *
 * @see common_design_subtheme_preprocess_page()
 * @see common_design_subtheme_get_block_render_array()
 */
function common_design_subtheme_preprocess_node(&$variables) {
  $route_name = \Drupal::routeMatch()->getRouteName();

  $node = $variables['node'];

  $language = $node->language();
  $variables['attributes']['lang'] = $language->getId();
  $variables['attributes']['dir'] = $language->getDirection();

  // Add the SVGs for gho-social-links so we can output them in multiple
  // templates without having to keep them up to date.
  /** @var \Drupal\Core\Extension\ExtensionPathResolver $extension_path_resolver */
  $extension_path_resolver = \Drupal::service('extension.path.resolver');
  $theme_path = $extension_path_resolver->getPath('theme', 'common_design_subtheme');
  $icon_twitter = file_get_contents($theme_path . '/components/gho-social-links/img/icon--twitter.svg');
  $icon_facebook = file_get_contents($theme_path . '/components/gho-social-links/img/icon--facebook.svg');
  $icon_linkedin = file_get_contents($theme_path . '/components/gho-social-links/img/icon--linkedin.svg');
  $icon_copyurl = file_get_contents($theme_path . '/components/gho-social-links/img/icon--copyurl.svg');
  $icon_pdf = file_get_contents($theme_path . '/components/gho-social-links/img/icon--pdf.svg');
  $variables['icon_twitter'] = $icon_twitter;
  $variables['icon_facebook'] = $icon_facebook;
  $variables['icon_linkedin'] = $icon_linkedin;
  $variables['icon_copyurl'] = $icon_copyurl;
  $variables['icon_pdf'] = $icon_pdf;

  // Add a link to download the PDF version of an article if any.
  if ($node->bundle() === 'article' && $node->hasField('field_pdf')) {
    $fid = $node->field_pdf->target_id;
    if (!empty($fid)) {
      $variables['pdf_download_url'] = '/node/' . $node->id() . '/download';
    }
  }

  if (isset($node) && $route_name == 'entity.node.standalone') {
    common_design_set_page_title($variables, $node->label(), FALSE);
  }
}

/**
 * Implements hook_preprocess_node__story().
 *
 * Extract the media credits to display them after the text.
 */
function common_design_subtheme_preprocess_node__story(&$variables) {
  if (isset($variables['content']['field_media'][0]['#media'])) {
    $credits = $variables['content']['field_media'][0]['#media']->field_credits->value;
    $variables['content']['credits'] = ['#markup' => $credits];
  }
}

/**
 * Implements hook_preprocess_node__article().
 *
 * Show the related articles at the end of the main articles.
 */
function common_design_subtheme_preprocess_node__article(&$variables) {
  $view_mode = $variables['view_mode'] ?? '';

  // Copy the hero image credits to the end of the caption field.
  if ($view_mode === 'full' || $view_mode === 'home_page') {
    if (isset($variables['content']['field_hero_image'][0]['#media'])) {
      $credits = $variables['content']['field_hero_image'][0]['#media']->field_credits->value;
      $variables['content']['field_caption'][0]['#credits'] = ['#markup' => $credits];
    }
  }
}

/**
 * Implements hook_preprocess_paragraph__sub_article().
 *
 * Add a class to the sub-article paragraph indicating whether the article has
 * a hero or not as it's difficult to access from within the twig templates.
 */
function common_design_subtheme_preprocess_paragraph__sub_article(&$variables) {
  if (isset($variables['content']['field_article'][0]['#node'])) {
    $hero = $variables['content']['field_article'][0]['#node']->field_hero_image->target_id;
    $variables['hero'] = !empty($hero);
  }
}

/**
 * Implements hook_preprocess_paragraph__photo_gallery().
 *
 * Extract the media credits to display them after the text.
 */
function common_design_subtheme_preprocess_paragraph__photo_gallery(&$variables) {
  if (isset($variables['content']['field_photos'][0]['#media'])) {
    $credits = $variables['content']['field_photos'][0]['#media']->field_credits->value;
    $variables['content']['credits'] = ['#markup' => $credits];
  }
}

/**
 * Implements hook_preprocess_paragraph__image_with_text().
 *
 * Extract the media credits to display them after the text.
 */
function common_design_subtheme_preprocess_paragraph__image_with_text(&$variables) {
  if (isset($variables['content']['field_image'][0]['#media'])) {
    $credits = $variables['content']['field_image'][0]['#media']->field_credits->value;
    $variables['content']['credits'] = ['#markup' => $credits];
  }
}

/**
 * Implements hook_preprocess_paragraph__section_index().
 *
 * Extract the media credits to display them after the text.
 */
function common_design_subtheme_preprocess_paragraph__section_index(&$variables) {
  if (isset($variables['content']['field_image'][0]['#media'])) {
    $credits = $variables['content']['field_image'][0]['#media']->field_credits->value;
    $variables['content']['field_caption'][0]['#credits'] = ['#markup' => $credits];
  }
}

/**
 * Implements hook_preprocess_field__node__field_caption__article().
 *
 * Add a class to identify the article caption.
 */
function common_design_subtheme_preprocess_field__node__field_caption__article(&$variables) {
  if (!isset($variables['items'][0]['content']['#attributes'])) {
    $variables['items'][0]['content']['#attributes'] = new Attribute();
  }
  $variables['items'][0]['content']['#attributes']->addClass('gho-caption--article');
}

/**
 * Implements hook_preprocess_page().
 *
 * Hide the page title for the node previews, basically what as
 * common_design_preprocess_page() does, only that there is no 'node' key in
 * the variables, so we resort to the route name.
 */
function common_design_subtheme_preprocess_page(&$variables) {
  $route_name = \Drupal::routeMatch()->getRouteName();
  if ($route_name == 'entity.node.preview' || $route_name == 'entity.node.standalone') {
    common_design_hide_rendered_blocks_from_page($variables, [
      'page_title_block',
    ]);
  }
}

/**
 * Implements hook_preprocess_page__404().
 */
function common_design_subtheme_preprocess_page__404(&$variables) {
  // Generate the message to display before the menu.
  $notfound = t('The page @path was not found.', [
    '@path' => \Drupal::request()->getPathInfo() ?? '/',
  ]);
  $message = [
    '<strong>' . $notfound . '</strong>',
    t('Sorry for any inconvenience.'),
    t('Here are some useful pages to help you get back on track:'),
  ];

  // Set the page content.
  $variables['page']['content']['system_main'] = [
    '#type' => 'container',
    '#attributes' => [
      'class' => ['gho-page-404'],
    ],
    '#attached' => [
      'library' => ['common_design_subtheme/gho-page-404'],
    ],
    '#cache' => [
      'contexts' => [
        'url.path',
      ],
    ],
    'message' => ['#markup' => '<p>' . implode('</p><p>', $message) . '</p>'],
    'navigation' => common_design_subtheme_get_navigation_tree(),
  ];
}

/**
 * Get the navigation tree for the 404 page.
 *
 * @return array
 *   Render array with either the main navigation tree or with a link to the
 *   homepage in English if there is none in the current language.
 */
function common_design_subtheme_get_navigation_tree() {
  $language_manager = \Drupal::service('language_manager');
  $langcode = $language_manager->getCurrentLanguage()->getId();

  // Check if the homepage in the given language exists.
  $storage = \Drupal::service('entity_type.manager')->getStorage('node');
  $ids = $storage->getQuery()
    ->accessCheck(TRUE)
    ->condition('nid', 1)
    ->condition('langcode', $langcode)
    ->condition('status', NodeInterface::PUBLISHED)
    ->execute();

  // Show a link to the homepage in English if there is no homepage in the
  // current language.
  if (empty($ids)) {
    $default_language = $language_manager->getDefaultLanguage();
    return [
      '#theme' => 'menu__page_not_found',
      '#items' => [
        'home page' => [
          'title' => t('Home page in @language', [
            '@language' => $default_language->getName(),
          ]),
          'url' => new Url('<front>', [], [
            'language' => $default_language,
          ]),
        ],
      ],
    ];
  }

  $menu_tree = \Drupal::service('menu.link_tree');

  // Parameter to load the menu children of the given menu.
  $parameters = new MenuTreeParameters();
  $parameters->setMaxdepth(2);
  $parameters->excludeRoot();

  // Load tree.
  $tree = $menu_tree->load('main', $parameters);

  // Check the access to the nodes in the menu and ensure they are sorted.
  $manipulators = [
    ['callable' => 'menu.default_tree_manipulators:checkNodeAccess'],
    ['callable' => 'menu.default_tree_manipulators:checkAccess'],
    ['callable' => 'menu.default_tree_manipulators:generateIndexAndSort'],
  ];

  // Tree is an associated array with a key for the parent menu entry
  // and a \Drupal\Core\Menu\MenuLinkTreeElement[] as value.
  $tree = $menu_tree->transform($tree, $manipulators);

  // Get the render for the tree and use the theme for the page not found.
  $build = $menu_tree->build($tree);
  $build['#theme'] = 'menu__page_not_found';

  // Remove the menu items without children.
  $items = array_filter($build['#items'], function ($item) {
    return !empty($item['below']);
  });

  // Add the homepage as first link.
  $build['#items'] = [
    'home page' => [
      'title' => t('Home page'),
      'url' => new Url('<front>'),
    ],
  ] + $items;

  return $build;
}
