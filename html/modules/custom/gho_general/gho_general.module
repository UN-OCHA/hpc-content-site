<?php

/**
 * @file
 * GHO General module file.
 */

use Drupal\Core\Form\FormStateInterface;
use Drupal\Core\Menu\MenuLinkInterface;
use Drupal\gho_general\GhoSwitchLanguage;
use Drupal\menu_link_content\Plugin\Menu\MenuLinkContent;
use Drupal\user\Entity\User;

/**
 * Implements hook_element_info_alter().
 *
 * Add pre and post render callbacks to ensure the contextual links and
 * admin toolbar are always rendered with the site default language.
 */
function gho_general_element_info_alter(array &$info) {
  $ids = ['contextual_links', 'toolbar'];
  foreach ($ids as $id) {
    if (isset($info[$id])) {
      gho_general_add_language_switch_callbacks($info[$id]);
    }
  }
}

/**
 * Add pre and post render callbacks to switch the language to a render element.
 *
 * @param array $element
 *   A renderable array.
 */
function gho_general_add_language_switch_callbacks(array &$element) {
  if (!isset($element['#pre_render'])) {
    $element['#pre_render'] = [];
  }

  array_unshift($element['#pre_render'], [GhoSwitchLanguage::class, 'preRender']);

  $element['#post_render'][] = [GhoSwitchLanguage::class, 'postRender'];
}

/**
 * Switch to the given language.
 *
 * @param string $langcode
 *   Language code to switch to. Empty to switch to the site's default language.
 *
 * @return string
 *   Current language code before the switch.
 */
function gho_general_switch_to_language($langcode = '') {
  $language_manager = \Drupal::service('language_manager');
  $translation_manager = \Drupal::service('string_translation');

  // Store the current language code.
  $current_langcode = $language_manager->getConfigOverrideLanguage()->getId();

  // Get the language associated with the langcode.
  if (!empty($langcode)) {
    $language = $language_manager->getLanguage($langcode);
  }

  // Use the site's default language.
  if (empty($language)) {
    $language = $language_manager->getDefaultLanguage();
  }

  // Change to the site default language.
  $language_manager->setConfigOverrideLanguage($language);
  $translation_manager->setDefaultLangcode($language->getId());

  return $current_langcode;
}

/**
 * Implements hook_form_node_form_alter().
 */
function gho_general_form_node_form_alter(&$form, FormStateInterface $form_state, $form_id) {
  // Ensure editors can publish/unpublish content.
  $form['status']['#access'] = TRUE;

  // Alter the promote option for the homepage to indicate it controls the
  // global visibility of the content for a given language.
  gho_general_alter_homepage_promote_checkbox($form, $form_state);
}

/**
 * Alter the promote checkbox on the homepage.
 *
 * Make it more visible in the form and show it controls language visibility.
 *
 * @param array $form
 *   Form element.
 * @param \Drupal\Core\Form\FormStateInterface $form_state
 *   Form state.
 */
function gho_general_alter_homepage_promote_checkbox(array &$form, FormStateInterface $form_state) {
  $storage = $form_state->getStorage();
  if (isset($storage['form_display'], $storage['langcode']) && $storage['form_display']->getMode() === 'home_page') {
    $promote_title = t("Enable global visibility of @language content", [
      '@language' => \Drupal::service('language_manager')
        ->getLanguage($storage['langcode'])
        ->getName(),
    ]);
    $form['promote']['#access'] = TRUE;
    $form['promote']['#group'] = 'footer';
    $form['promote']['widget']['#title'] = $promote_title;
    $form['promote']['widget']['value']['#title'] = $promote_title;
  }
}

/**
 * Implements hook_form_menu_link_content_menu_link_content_form_alter().
 *
 * Use a textarea for the menu link title so that we can put line breaks to
 * control where the label breaks when displayed by adding line breaks.
 */
function gho_general_form_menu_link_content_menu_link_content_form_alter(&$form, FormStateInterface $form_state, $form_id) {
  if (isset($form['title']['widget']['0']['value']['#type'])) {
    $form['title']['widget']['0']['value']['#type'] = 'textarea';
  }
}

/**
 * Implements hook_preprocess_media().
 */
function gho_general_preprocess_media(&$variables) {
  gho_general_flag_untranslated('media', $variables);
}

/**
 * Implements hook_preprocess_node().
 */
function gho_general_preprocess_node(&$variables) {
  gho_general_flag_untranslated('node', $variables);
}

/**
 * Implements hook_preprocess_paragraph().
 */
function gho_general_preprocess_paragraph(&$variables) {
  gho_general_flag_untranslated('paragraph', $variables);
}

/**
 * Implements hook_preprocess_taxonomy_term().
 */
function gho_general_preprocess_taxonomy_term(&$variables) {
  if (isset($variables['term']) && $variables['term']->bundle() !== 'needs_and_requirements') {
    gho_general_flag_untranslated('term', $variables);
  }
}

/**
 * Flag the entity as not having a translation for the current language.
 *
 * @param string $entity_key
 *   Key to retrieve the entity from the variables array.
 * @param array $variables
 *   Variables array as passed to a hook_preprocess().
 */
function gho_general_flag_untranslated($entity_key, array &$variables) {
  static $is_administrator;

  if (!isset($is_administrator)) {
    $is_administrator = User::load(\Drupal::currentUser()->id())->hasRole('administrator');
  }

  if (isset($variables[$entity_key]) && $is_administrator) {
    $langcode = \Drupal::service('language_manager')->getCurrentLanguage()->getId();

    if (!$variables[$entity_key]->hasTranslation($langcode)) {
      $variables['attributes']['class'][] = $entity_key . '--untranslated';
    }
  }
}

/**
 * Implements hook_preprocess_menu().
 */
function gho_general_preprocess_menu(&$variables) {
  if ($variables['menu_name'] == 'main' || $variables['menu_name'] == 'footer') {
    // Get context language.
    $language = Drupal::languageManager()->getCurrentLanguage()->getId();

    if (isset($variables['items'])) {
      gho_general_menu_item_cleanup($variables['items'], $language);
    }
  }
}

/**
 * Recursive function to remove menu items with different language.
 *
 * @param array $items
 *   Menu items for current menu depth.
 * @param string $language
 *   The context language.
 */
function gho_general_menu_item_cleanup(array &$items, $language) {
  // Check language for current menu depth.
  foreach ($items as $key => &$item) {
    // Do not try to process this item if there is no original link.
    if (empty($item['original_link'])) {
      continue;
    }
    $menuLinkEntity = gho_general_load_link_entity_by_link($item['original_link']);

    // Ignore if we donÂ´t have a menu object.
    if ($menuLinkEntity != NULL) {
      $languages = $menuLinkEntity->getTranslationLanguages();

      // Remove links with different language than context.
      if (!array_key_exists($language, $languages)) {
        unset($items[$key]);
      }
      // Recursive call until no more below items exists.
      elseif (isset($items[$key]['below'])) {
        gho_general_menu_item_cleanup($items[$key]['below'], $language);
      }
    }
  }
}

/**
 * Load entity by link.
 */
function gho_general_load_link_entity_by_link(MenuLinkInterface $menuLinkContentPlugin) {
  $entity = NULL;

  if ($menuLinkContentPlugin instanceof MenuLinkContent) {
    [$entity_type, $uuid] = explode(':', $menuLinkContentPlugin->getPluginId(), 2);
    $entity = \Drupal::service('entity.repository')->loadEntityByUuid($entity_type, $uuid);
  }

  return $entity;
}
