<?php

/**
 * @file
 * NCMS UI module file.
 */

use Drupal\Component\Serialization\Json;
use Drupal\Core\Access\AccessResult;
use Drupal\Core\Database\Query\AlterableInterface;
use Drupal\Core\Entity\Display\EntityViewDisplayInterface;
use Drupal\Core\Entity\EntityInterface;
use Drupal\Core\Entity\FieldableEntityInterface;
use Drupal\Core\Form\FormStateInterface;
use Drupal\Core\Render\Markup;
use Drupal\Core\Session\AccountInterface;
use Drupal\Core\Url;
use Drupal\media\MediaInterface;
use Drupal\ncms_ui\ContentSpaceManager;
use Drupal\ncms_ui\Controller\ViewController;
use Drupal\ncms_ui\Entity\Content\Article;
use Drupal\ncms_ui\Entity\Content\ContentBase;
use Drupal\ncms_ui\Entity\Content\Document;
use Drupal\ncms_ui\Entity\Content\Story;
use Drupal\ncms_ui\Entity\ContentInterface;
use Drupal\ncms_ui\Entity\ContentSpaceAwareInterface;
use Drupal\ncms_ui\Entity\EntityOverviewInterface;
use Drupal\ncms_ui\Entity\IframeDisplayContentInterface;
use Drupal\ncms_ui\Entity\Media\Author;
use Drupal\ncms_ui\Entity\Media\Image;
use Drupal\ncms_ui\Entity\Media\Infographic;
use Drupal\ncms_ui\Entity\Media\MediaBase;
use Drupal\ncms_ui\Entity\Media\Video;
use Drupal\ncms_ui\Entity\Taxonomy\ContentSpace;
use Drupal\ncms_ui\Form\ContentSpaceSelectForm;
use Drupal\node\NodeInterface;
use Drupal\user\Entity\User;
use Drupal\views\Plugin\views\cache\CachePluginBase;
use Drupal\views\Plugin\views\query\QueryPluginBase;
use Drupal\views\ViewExecutable;

/**
 * Implements hook_entity_bundle_info_alter().
 */
function ncms_ui_entity_bundle_info_alter(array &$bundles) {
  // Content.
  $bundles['node']['article']['class'] = Article::class;
  $bundles['node']['article']['label'] = t('Article');
  $bundles['node']['document']['class'] = Document::class;
  $bundles['node']['document']['label'] = t('Document');
  $bundles['node']['story']['class'] = Story::class;
  $bundles['node']['story']['label'] = t('Story');
  // Terms.
  $bundles['taxonomy_term']['content_space']['class'] = ContentSpace::class;
  $bundles['taxonomy_term']['content_space']['label'] = t('Content space');
  // Media.
  $bundles['media']['author']['class'] = Author::class;
  $bundles['media']['author']['label'] = t('Author');
  $bundles['media']['image']['class'] = Image::class;
  $bundles['media']['image']['label'] = t('Image');
  $bundles['media']['infographic']['class'] = Infographic::class;
  $bundles['media']['infographic']['label'] = t('Infographic');
  $bundles['media']['video']['class'] = Video::class;
  $bundles['media']['video']['label'] = t('Video');
}

/**
 * Implements hook_entity_type_alter().
 */
function ncms_ui_entity_type_alter(array &$entity_types) {
  /** @var \Drupal\Core\Entity\EntityTypeInterface[] $entity_types */
  // Set the controller class for nodes to an alternate implementation of the
  // Drupal\Core\Entity\EntityStorageInterface interface.
  $entity_types['node']->setStorageClass('Drupal\ncms_ui\Entity\Storage\ContentStorage');
}

/**
 * Implements hook_entity_base_field_info_alter().
 */
function ncms_ui_entity_base_field_info_alter(&$fields, $entity_type) {
  if ($entity_type->id() == 'node') {
    if (isset($fields['title'])) {
      $fields['title']->setDisplayConfigurable('view', TRUE);
    }
  }
}

/**
 * Implements hook_entity_operation().
 */
function ncms_ui_entity_operation(EntityInterface $entity) {
  $operations = [];
  if ($entity instanceof ContentInterface) {
    $operations = $entity->getEntityOperations();
  }
  return $operations;
}

/**
 * Implements hook_theme().
 */
function ncms_ui_theme() {
  return [
    'tooltip' => [
      'variables' => [
        'icon' => NULL,
        'content' => NULL,
        'class' => NULL,
      ],
      'file' => 'ncms_ui.theme.inc',
      'template' => 'tooltip',
    ],
  ];
}

/**
 * Implements hook_ENTITY_TYPE_create() for media entities.
 *
 * Assure that media is always created using the current content space. This is
 * necessary here to cope with inline-creation of media, e.g. in an entity
 * browser widget.
 */
function ncms_ui_media_create(FieldableEntityInterface $media) {
  if (!$media->hasField('field_content_space')) {
    return;
  }
  /** @var \Drupal\ncms_ui\ContentSpaceManager $content_space_manager */
  $content_space_manager = \Drupal::service('ncms_ui.content_space.manager');
  $media->get('field_content_space')->setValue([
    'target_id' => $content_space_manager->getCurrentContentSpaceId(),
  ]);
}

/**
 * Implements hook_local_tasks_alter().
 */
function ncms_ui_local_tasks_alter(&$local_tasks) {
  // Remove the "View" tab from node edit pages.
  unset($local_tasks['entity.node.canonical']);
  // Rename the default menu tab on the content overview page to "Articles".
  $local_tasks['system.admin_content']['title'] = t('Articles');
  // Rename the revisions tab.
  $local_tasks['entity.node.version_history']['title'] = t('Versions');
  // Hide the replicate tab.
  if (array_key_exists('replicate_ui.local_tasks:entity.node.replicate', $local_tasks)) {
    unset($local_tasks['replicate_ui.local_tasks:entity.node.replicate']);
  }
  // Remove the content moderations latest tab.
  if (array_key_exists('content_moderation.workflows:node.latest_version_tab', $local_tasks)) {
    unset($local_tasks['content_moderation.workflows:node.latest_version_tab']);
  }
}

/**
 * Implements hook_menu_local_actions_alter().
 */
function ncms_ui_menu_local_actions_alter(&$local_actions) {
  $local_actions['entity.taxonomy_term.add_form']['class'] = 'Drupal\ncms_ui\LocalAction\LocalActionTaxonomy';
  $local_actions['node.add_page']['class'] = 'Drupal\ncms_ui\LocalAction\LocalActionContent';
}

/**
 * Implements hook_page_attachments_alter().
 */
function ncms_ui_page_attachments_alter(array &$attachments) {
  /** @var \Drupal\Core\Extension\ExtensionPathResolver $extension_resolver */
  $extension_resolver = \Drupal::service('extension.path.resolver');
  $modules_path = $extension_resolver->getPath('module', 'ncms_ui');

  // Remove the default favicon.
  foreach ($attachments['#attached']['html_head_link'] as $key => $link) {
    if (!array_key_exists(0, $link) || !array_key_exists('rel', $link[0])) {
      continue;
    }
    if ($link[0]['rel'] == 'icon') {
      unset($attachments['#attached']['html_head_link'][$key]);
    }
  }

  // Set the new favicons.
  $attachments['#attached']['html_head_link'][][] = [
    'rel' => 'apple-touch-icon',
    'href' => '/' . $modules_path . '/assets/favicons/apple-touch-icon.png',
    'sizes' => '180x180',
    'type' => 'image/png',
  ];
  $attachments['#attached']['html_head_link'][][] = [
    'rel' => 'icon',
    'href' => '/' . $modules_path . '/assets/favicons/favicon-32x32.png',
    'type' => 'image/png',
  ];
  $attachments['#attached']['html_head_link'][][] = [
    'rel' => 'icon',
    'href' => '/' . $modules_path . '/assets/favicons/favicon-16x16.png',
    'type' => 'image/png',
  ];
  $attachments['#attached']['html_head_link'][][] = [
    'rel' => 'manifest',
    'href' => '/' . $modules_path . '/assets/favicons/site.webmanifest',
  ];

  $is_gin = \Drupal::service('theme.manager')->getActiveTheme()->getName() == 'gin';
  if ($is_gin) {
    $attachments['#attached']['library'][] = 'ncms_ui/ncms_gin';
  }
}

/**
 * Implements hook_ENTITY_TYPE_view_alter().
 */
function ncms_ui_entity_view_alter(array &$build, EntityInterface $entity, EntityViewDisplayInterface $display) {
  if ($build['#view_mode'] === 'full' && $display->getComponent('workflow_buttons')) {
    unset($build['workflow_buttons']);
  }
  if ($build['#view_mode'] === 'full' && $display->getComponent('content_moderation_control')) {
    unset($build['content_moderation_control']);
  }
}

/**
 * Implements template_preprocess_html().
 */
function ncms_ui_preprocess_html(&$variables) {
  // Hide admin toolbar.
  $route_match = \Drupal::routeMatch();
  $route_name = $route_match->getRouteName();
  $routes = [
    'entity.node.standalone',
    'entity.node_revision.standalone',
    'entity.node.preview',
    'diff.revisions_diff',
  ];
  if (in_array($route_name, $routes)) {
    if (!empty($variables['page_top']['toolbar'])) {
      unset($variables['page_top']['toolbar']);
    }
    if (!empty($variables['attributes']['class'])) {
      $variables['attributes']['class'] = array_filter($variables['attributes']['class'], function ($value) {
        return strpos($value, 'toolbar-') !== 0;
      });
    }
    $variables['attributes']['class'][] = 'ncms-node-preview';
  }

  if ($route_name == 'diff.revisions_diff') {
    unset($variables['page']['content']['common_design_subtheme_page_title']);
    $variables['attributes']['class'][] = 'ncms-node-diff';
    $variables['page']['content']['system_main']['#attached']['library'][] = 'ncms_ui/diff';
  }

  if ($route_name == 'entity.node.edit_form' && $route_match->getParameter('node') instanceof ContentInterface) {
    $variables['attributes']['class'][] = 'node-content-base';
  }
  /** @var \Drupal\node\Entity\NodeType $node_type */
  $node_type = $route_match->getParameter('node_type');
  $bundle_info = \Drupal::service('entity_type.bundle.info')->getBundleInfo('node');
  if ($route_name == 'node.add' && is_subclass_of($bundle_info[$node_type->id()]['class'], ContentBase::class)) {
    $variables['attributes']['class'][] = 'node-content-base';
  }
}

/**
 * Implements hook_preprocess_page().
 */
function ncms_ui_preprocess_page(&$variables) {
  // Not technically necessary, but by attaching these 2 libraries, we will get
  // the same outline look of the modal dialogs (specifically when it comes to
  // the outer borders) for the node preview (coming from the node edit form)
  // and the node view in modal (coming from the admin content listing).
  $variables['#attached']['library'][] = 'core/jquery.ui.autocomplete';
  $variables['#attached']['library'][] = 'core/drupal.dialog';
}

/**
 * Implements toolbar preprocess.
 */
function ncms_ui_preprocess_toolbar__gin__secondary(&$variables) {
  if ($variables['toolbar_variant'] !== 'classic') {
    /** @var \Drupal\Core\Form\FormBuilderInterface $form_builder */
    $form_builder = \Drupal::service('form_builder');
    $variables['remainder']['content_space'] = $form_builder->getForm(ContentSpaceSelectForm::class);
  }
}

/**
 * Implements hook_preprocess_page().
 */
function ncms_ui_preprocess_node(&$variables) {
  if (in_array($variables['elements']['#view_mode'], ['teaser', 'teaser_card'])) {
    $variables['page'] = TRUE;
  }
}

/**
 * Implements hook_preprocess_hook().
 */
function ncms_ui_preprocess_field__paragraph__field_title__document_chapter(&$variables) {
  if ($variables['element']['#view_mode'] != 'preview') {
    return;
  }
  /** @var \Drupal\paragraphs\Entity\Paragraph $paragraph */
  $paragraph = $variables['element']['#object'];
  // If the chapter is marked as hidden, add a note to the title.
  if ($paragraph->hasField('field_hide_from_navigation') && $paragraph->get('field_hide_from_navigation')->value) {
    $variables['items'][0]['content']['#template'] .= Markup::create('<span style="font-style: italic; font-weight: normal;"> ({{ note }})</span>');
    $variables['items'][0]['content']['#context']['note'] = t('Hidden from navigation');
  }
}

/**
 * Implements hook_form_FORM_ID_alter().
 */
function ncms_ui_form_node_preview_form_select_alter(&$form, FormStateInterface $form_state) {
  // Disable the view mode selection on the node previews. All we want to see
  // is the full page preview.
  $form['#access'] = FALSE;
}

/**
 * Implements hook_form_FORM_ID_alter().
 */
function ncms_ui_form_node_form_alter(&$form, FormStateInterface $form_state) {
  /** @var \Drupal\node\NodeInterface $node */
  $node = $form_state->getFormObject()->getEntity();

  // Change the behavior of the preview button to show the node preview in a
  // modal using an iframe.
  $form['actions']['preview']['#ajax'] = [
    'callback' => [ViewController::class, 'previewModal'],
    'event' => 'click',
  ];

  if ($node instanceof Document) {
    // Attach custom styles.
    $form['#attached']['library'][] = 'ncms_ui/document_edit_form';
  }

  if ($node instanceof Article) {
    // Attach custom styles.
    $form['#attached']['library'][] = 'ncms_ui/article_edit_form';
  }

  if ($node instanceof ContentInterface) {
    /** @var \Drupal\ncms_ui\Form\ContentBaseFormAlter $content_base_form_alter */
    $content_base_form_alter = \Drupal::service('ncms_ui.content_base_form_alter');
    $content_base_form_alter->alterForm($form, $form_state);
  }

  if ($node instanceof ContentSpaceAwareInterface) {
    /** @var \Drupal\ncms_ui\Form\ContentSpaceFormAlter $content_space_form_alter */
    $content_space_form_alter = \Drupal::service('ncms_ui.content_space_form_alter');
    $content_space_form_alter->alterForm($form, $form_state);
  }

  if ($node instanceof EntityOverviewInterface) {
    /** @var \Drupal\ncms_ui\Form\EntityOverviewFormAlter $entity_overview_form_alter */
    $entity_overview_form_alter = \Drupal::service('ncms_ui.entity_overview_form_alter');
    $entity_overview_form_alter->alterForm($form, $form_state);
  }

  // Hide the label of the double field widget.
  if (array_key_exists('field_caption', $form)) {
    $form['field_caption']['widget'][0]['#title_display'] = FALSE;
  }

  // Add a cancel link. This either redirects to the publisher site if this
  // request came from an external publisher, or to a url given in the
  // destination query argument, or, as a fallback, to the main content
  // overview page.
  /** @var \Drupal\ncms_publisher\PublisherManager $publisher_manager */
  $publisher_manager = \Drupal::service('ncms_publisher.publisher.manager');
  $publisher_redirect = $publisher_manager->getCurrentRedirectUrl();

  $redirect_label = $publisher_redirect ? (string) t('Back to @publisher', [
    '@publisher' => $publisher_manager->getCurrentPublisher()->label(),
  ]) : NULL;

  // Take the destination only if it's not pointing to the current edit page.
  $current_destination = \Drupal::destination()->get();
  $destination_redirect = $node->id() && $current_destination != $node->toUrl('edit-form')->toString() ? $current_destination : NULL;

  // Set the redirect url. Publishers have priority, otherwise take the
  // destination if it's available.
  $redirect_url = $publisher_redirect ? Url::fromUri($publisher_redirect) : NULL;
  if (!$redirect_url && $destination_redirect) {
    $redirect_url = url::fromUserInput($destination_redirect);
  }
  if (!$redirect_url && $node instanceof EntityOverviewInterface) {
    $redirect_url = $node->getOverviewUrl();
  }
  // And if we still don't have a valid redirect, use the fallback.
  if (!$redirect_url) {
    $redirect_url = Url::fromRoute('system.admin_content');
  }

  $is_gin = \Drupal::service('theme.manager')->getActiveTheme()->getName() == 'gin';
  if ($is_gin) {
    $form['#attached']['library'][] = 'ncms_ui/ncms_gin';
    $form['#attached']['drupalSettings']['ncms_gin']['redirect_url'] = $redirect_url->toString();
    if ($redirect_label) {
      $form['#attached']['drupalSettings']['ncms_gin']['redirect_label'] = $redirect_label;
    }
  }
  else {
    $form['actions']['cancel'] = [
      '#type' => 'link',
      '#title' => t('Cancel'),
      '#url' => $redirect_url,
      '#weight' => 20,
    ];
  }
}

/**
 * Implements hook_form_FORM_ID_alter().
 */
function ncms_ui_form_media_form_alter(&$form, FormStateInterface $form_state) {
  /** @var \Drupal\media\MediaInterface $node */
  $entity = $form_state->getFormObject()->getEntity();
  if ($entity instanceof MediaBase) {
    /** @var \Drupal\ncms_ui\Form\ContentSpaceFormAlter $content_space_form_alter */
    $content_space_form_alter = \Drupal::service('ncms_ui.content_space_form_alter');
    $content_space_form_alter->alterForm($form, $form_state);
  }
  if ($entity instanceof EntityOverviewInterface) {
    /** @var \Drupal\ncms_ui\Form\EntityOverviewFormAlter $entity_overview_form_alter */
    $entity_overview_form_alter = \Drupal::service('ncms_ui.entity_overview_form_alter');
    $entity_overview_form_alter->alterForm($form, $form_state);
  }

  // Take the destination only if it's not pointing to the current edit page.
  $current_destination = \Drupal::destination()->get();
  $destination_redirect = $entity->id() && $current_destination != $entity->toUrl('edit-form')->toString() ? $current_destination : NULL;

  // Set the redirect url. Publishers have priority, otherwise take the
  // destination if it's available.
  $redirect_url = NULL;
  if ($destination_redirect) {
    $redirect_url = url::fromUserInput($destination_redirect);
  }
  if (!$redirect_url && $entity instanceof EntityOverviewInterface) {
    $redirect_url = $entity->getOverviewUrl();
  }
  // And if we still don't have a valid redirect, use the fallback.
  if (!$redirect_url) {
    $redirect_url = Url::fromRoute('system.admin_content');
  }

  $is_gin = \Drupal::service('theme.manager')->getActiveTheme()->getName() == 'gin';
  if ($is_gin) {
    $form['#attached']['library'][] = 'ncms_ui/ncms_gin';
    $form['#attached']['drupalSettings']['ncms_gin']['redirect_url'] = $redirect_url->toString();
  }
  else {
    $form['actions']['cancel'] = [
      '#type' => 'link',
      '#title' => t('Cancel'),
      '#url' => $redirect_url,
      '#weight' => 20,
    ];
  }
}

/**
 * Implements hook_form_FORM_ID_alter().
 */
function ncms_ui_form_revision_overview_form_alter(&$form, FormStateInterface $form_state) {
  /** @var \Drupal\ncms_ui\Form\RevisionOverviewFormAlter $replicate_form_alter */
  $replicate_form_alter = \Drupal::service('ncms_ui.revision_overview_form_alter');
  $replicate_form_alter->alterForm($form, $form_state);
}

/**
 * Implements hook_form_FORM_ID_alter().
 *
 * Show the question as the description for the revert confirm form.
 */
function ncms_ui_form_node_revision_revert_confirm_alter(&$form, FormStateInterface $form_state) {
  /** @var \Drupal\node\Form\NodeRevisionRevertForm $form_object */
  $form_object = $form_state->getFormObject();
  $form['description'] = ['#markup' => $form_object->getQuestion()];
}

/**
 * Implements hook_form_FORM_ID_alter().
 */
function ncms_ui_form_views_form_media_library_page_alter(&$form, FormStateInterface $form_state) {
  /** @var \Drupal\ncms_ui\ContentSpaceManager $content_space_manager */
  $content_space_manager = \Drupal::service('ncms_ui.content_space.manager');
  if (!$content_space_manager->userIsInValidContentSpace()) {
    $form['header']['#access'] = FALSE;
    $form['media_bulk_form']['#access'] = FALSE;
  }
}

/**
 * Implements hook_views_post_render().
 */
function ncms_ui_views_post_render(ViewExecutable $view, &$output, CachePluginBase $cache) {
  if ($view->id() === 'media_library') {
    // @codingStandardsIgnoreStart
    /** @var \Drupal\ncms_ui\ContentSpaceManager $content_space_manager */
    // $content_space_manager = \Drupal::service('ncms_ui.content_space.manager');
    // if (!$content_space_manager->userIsInValidContentSpace()) {
    //   $output['#attached']['library'] = array_diff($output['#attached']['library'], ['media_library/view']);
    // }
    // @codingStandardsIgnoreEnd
  }
}

/**
 * Implements hook_form_alter().
 */
function ncms_ui_form_alter(&$form, FormStateInterface $form_state, $form_id) {
  if (strpos($form_id, '_replicate_form')) {
    /** @var \Drupal\ncms_ui\Form\ReplicateFormAlter $replicate_form_alter */
    $replicate_form_alter = \Drupal::service('ncms_ui.replicate_form_alter');
    $replicate_form_alter->alterForm($form, $form_state);
  }
}

/**
 * Implements hook_gin_content_form_routes().
 *
 * Used to prevent Gin from treating AJAX issues confirm dialogs on the node
 * edit screens as full node edit forms, adding it's bells and whistles like
 * the sidebar for example.
 */
function ncms_ui_gin_content_form_routes_alter(&$routes) {
  $exclude_routes = [
    'node.add',
    'entity.node.edit_form',
  ];
  if (\Drupal::request()->isXmlHttpRequest() && in_array(\Drupal::routeMatch()->getRouteName(), $exclude_routes)) {
    $routes = array_diff($routes, $exclude_routes);
  }
}

/**
 * Implements hook_link_alter().
 */
function ncms_ui_link_alter(&$variables) {
  /** @var \Drupal\Core\Url $url */
  $url = $variables['url'];
  $routes = [
    'entity.node.canonical',
    'entity.node.revision',
  ];
  if ($url->isRouted() && in_array($url->getRouteName(), $routes)) {
    $route_params = $url->getRouteParameters();
    /** @var \Drupal\node\NodeStorageInterface $node_storage */
    $node_storage = \Drupal::entityTypeManager()->getStorage('node');
    /** @var \Drupal\node\NodeInterface $node */
    $node = $node_storage->load($route_params['node']);
    if (!$node instanceof IframeDisplayContentInterface) {
      return;
    }
    $node_revision = !empty($route_params['node_revision']) ? $node_storage->loadRevision($route_params['node_revision']) : NULL;

    $title = t('Preview: @title', ['@title' => $variables['text']]);
    if ($node && $node instanceof ContentInterface) {
      $title = t('Preview: @title (@status)', [
        '@title' => $node->label(),
        '@status' => $node->isPublished() ? t('Latest published') : t('Latest draft'),
      ]);
    }
    if ($node_revision && $node_revision instanceof ContentInterface) {
      $title = t('Preview: #@version (@status) - @date', [
        '@version' => $node_revision->getVersionId(),
        '@status' => $node_revision->getVersionStatusLabel(),
        '@date' => \Drupal::service('date.formatter')->format($node_revision->getRevisionCreationTime(), 'short'),
      ]);
    }

    $variables['options']['attributes']['title'] = t('Show a preview of this @bundle', [
      '@bundle' => strtolower(\Drupal::entityTypeManager()->getStorage('node_type')->load($node->bundle())->label()),
    ]);
    $variables['options']['attributes']['class'][] = 'use-ajax';
    $variables['options']['attributes']['data-dialog-type'] = 'modal';
    $variables['options']['attributes']['data-dialog-options'] = Json::encode([
      'width' => '80%',
      'title' => $title,
      'dialogClass' => 'node-preview',
    ]);
    if ($url->getRouteName() == 'entity.node.canonical') {
      $variables['url'] = Url::fromRoute('entity.node.iframe', ['node' => $node->id()]);
    }
    elseif ($url->getRouteName() == 'entity.node.revision') {
      $node_revision = $url->getRouteParameters()['node_revision'];
      $variables['url'] = Url::fromRoute('entity.node_revision.iframe', [
        'node' => $node->id(),
        'node_revision' => $node_revision,
      ]);
    }
    $variables['#attached']['library'] = ['ncms_ui/node_preview'];
  }
}

/**
 * Implements hook_views_data_alter().
 */
function ncms_ui_views_data_alter(&$data) {
  // New comments are only supported for node table because it requires the
  // history table.
  $data['node']['article_document'] = [
    'title' => t('Document'),
    'help' => t('Lists the documents in which a node appears.'),
    'field' => [
      'id' => 'article_document_field',
      'no group by' => TRUE,
      'click sortable' => FALSE,
    ],
  ];
  $data['node']['latest_version'] = [
    'title' => t('Latest version'),
    'help' => t('Shows the latest version for a node.'),
    'field' => [
      'id' => 'latest_version_field',
      'no group by' => TRUE,
      'click sortable' => FALSE,
    ],
  ];
  $data['node']['latest_published_version'] = [
    'title' => t('Latest published version'),
    'help' => t('Shows the latest published version for a node.'),
    'field' => [
      'id' => 'latest_published_version_field',
      'no group by' => TRUE,
      'click sortable' => FALSE,
    ],
  ];
  $data['node']['content_status'] = [
    'title' => t('Content status'),
    'help' => t('Shows the content status.'),
    'field' => [
      'id' => 'content_status_field',
      'no group by' => TRUE,
      'click sortable' => FALSE,
    ],
  ];
}

/**
 * Implements hook_views_query_alter().
 */
function ncms_ui_views_query_alter(ViewExecutable $view, QueryPluginBase $query) {
  /** @var \Drupal\ncms_ui\ContentSpaceManager $content_space_manager */
  $content_space_manager = \Drupal::service('ncms_ui.content_space.manager');
  $content_space_manager->alterViewsQuery($view, $query);
}

/**
 * Implements hook_views_pre_render().
 *
 * Hide the "Latest version" column when looking at content that is not in one
 * of the users content spaces.
 */
function ncms_ui_views_pre_render(ViewExecutable $view) {
  $valid_displays = [
    'page_articles',
    'page_documents',
  ];
  if ($view->id() != 'content' || !in_array($view->current_display, $valid_displays) || !array_key_exists('latest_version', $view->field)) {
    return;
  }
  /** @var \Drupal\ncms_ui\ContentSpaceManager $content_space_manager */
  $content_space_manager = \Drupal::service('ncms_ui.content_space.manager');
  if (!$content_space_manager->userIsInValidContentSpace()) {
    unset($view->field['latest_version']);
  }
}

/**
 * Implements hook_node_access_records().
 */
function ncms_ui_node_access_records(NodeInterface $node) {
  if (!$node->hasField('field_content_space')) {
    return [];
  }

  $grants = [];
  $grants[] = [
    'realm' => ContentSpaceManager::NODE_ACCESS_REALM,
    'gid' => 0,
    'grant_view' => $node->isPublished(),
    'grant_update' => 0,
    'grant_delete' => 0,
    'priority' => 0,
  ];

  // Get the content space id from the current node if it's available.
  $content_space_id = !$node->field_content_space->isEmpty() ? $node->field_content_space->entity->tid->value : NULL;
  if (!$content_space_id) {
    return $grants;
  }
  $grants[] = [
    'realm' => ContentSpaceManager::NODE_ACCESS_REALM,
    'gid' => $content_space_id,
    'grant_view' => 1,
    'grant_update' => 1,
    'grant_delete' => 1,
    'priority' => 0,
  ];

  return $grants;
}

/**
 * Implements hook_node_grants().
 */
function ncms_ui_node_grants(AccountInterface $account, $op) {
  $grants = [];
  $grants[ContentSpaceManager::NODE_ACCESS_REALM] = [0];

  $user = User::load($account->id());
  if (!$user->hasField('field_content_spaces')) {
    return $grants;
  }

  $content_spaces = \Drupal::entityTypeManager()->getStorage('taxonomy_term')->loadByProperties([
    'vid' => 'content_space',
  ]);
  if ($user->hasPermission('administer nodes') && !empty($content_spaces)) {
    $grants[ContentSpaceManager::NODE_ACCESS_REALM] = array_merge($grants[ContentSpaceManager::NODE_ACCESS_REALM], array_values(array_map(function ($term) {
      /** @var \Drupal\taxonomy\Entity\Term $term */
      return (int) $term->id();
    }, $content_spaces)));
  }
  elseif (!$user->field_content_spaces->isEmpty()) {
    foreach ($user->field_content_spaces->referencedEntities() as $content_space) {
      $grants[ContentSpaceManager::NODE_ACCESS_REALM][] = (int) $content_space->tid->value;
    }
  }
  return $grants;
}

/**
 * Implements hook_media_access().
 */
function ncms_ui_media_access(MediaInterface $media, $operation, AccountInterface $account) {
  if ($media instanceof MediaBase) {
    /** @var \Drupal\ncms_ui\ContentSpaceManager $content_space_manager */
    $content_space_manager = \Drupal::service('ncms_ui.content_space.manager');
    switch ($operation) {
      case 'update':
      case 'delete':
        return $content_space_manager->userIsInValidContentSpace() ? AccessResult::allowed() : AccessResult::forbidden();
    }
  }
  // No opinion, let other modules handle the permissions.
  return AccessResult::neutral();
}

/**
 * Implements hook_query_TAG_alter().
 */
function ncms_ui_query_media_access_alter(AlterableInterface $query) {
  /** @var \Drupal\ncms_ui\ContentSpaceManager $content_space_manager */
  $content_space_manager = \Drupal::service('ncms_ui.content_space.manager');
  $content_space_manager->alterMediaAccessQuery($query);
}
