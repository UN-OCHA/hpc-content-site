<?php

/**
 * @file
 * NCMS GraphQL module file.
 */

use Drupal\Core\Entity\Display\EntityViewDisplayInterface;
use Drupal\Core\Entity\EntityInterface;
use Drupal\Core\Entity\EntityTypeInterface;
use Drupal\Core\Field\BaseFieldDefinition;

/**
 * Implements hook_entity_base_field_info().
 *
 * Add a new node property to be able to force the update of a node visible to
 * external partners.
 */
function ncms_graphql_entity_base_field_info(EntityTypeInterface $entity_type) {
  if ($entity_type->id() == 'node') {
    $fields = [];
    $fields['force_update'] = BaseFieldDefinition::create('timestamp')
      ->setLabel(t('Force update'))
      ->setDescription(t('The time that the node was last forced to update.'))
      ->setRevisionable(TRUE)
      ->setTranslatable(TRUE);
    return $fields;
  }
}

/**
 * Implements hook_node_view_alter().
 */
function ncms_graphql_node_view_alter(array &$build, EntityInterface $entity, EntityViewDisplayInterface $display) {
  ncms_graphql_partial_revert_of_footnotes_processing($build);
}

/**
 * Implements hook_paragraph_view_alter().
 */
function ncms_graphql_paragraph_view_alter(array &$build, EntityInterface $entity, EntityViewDisplayInterface $display) {
  if ($entity->bundle() === 'text') {
    ncms_graphql_partial_revert_of_footnotes_processing($build);
  }
}

/**
 * Partially revert the footnote processing from gho_footnotes_prepare_build().
 */
function ncms_graphql_partial_revert_of_footnotes_processing(&$build) {
  /** @var Drupal\graphql\Entity\ServerInterface $graphql_server */
  $graphql_server = \Drupal::routeMatch()->getParameter('graphql_server');
  if (!$graphql_server) {
    // Skip if this is not a graphql request.
    return;
  }

  if ($graphql_server->schema != 'ncms_schema' || \Drupal::request()->getRequestUri() != $graphql_server->endpoint) {
    // Skip if this request is not against a schema provided by us.
    return;
  }

  // Otherwhise, partially revert changes from gho_footnotes_prepare_build(),
  // so that inidivual paragraphs can be re-assembled and reprocessed on the
  // requesting side.
  if (array_key_exists('footnotes', $build)) {
    unset($build['footnotes']);
  }
  if (array_key_exists('#post_render', $build) && !empty($build['#post_render'])) {
    $build['#post_render'] = array_filter($build['#post_render'], function ($item) {
      return !is_array($item) || $item[0] != 'Drupal\gho_footnotes\GhoFootnotes';
    });
  }
}
