From 3cf003dbb423405425d79c5dccde327669b801bc Mon Sep 17 00:00:00 2001
From: Lucas D Hedding <lucashedding@1463982.no-reply.drupal.org>
Date: Tue, 26 Dec 2023 12:37:36 -0600
Subject: [PATCH] rebase

---
 core/lib/Drupal/Component/Utility/Xss.php     | 107 +++++++++++++++---
 .../Tests/Component/Utility/XssTest.php       |  97 +++++++++++++++-
 2 files changed, 190 insertions(+), 14 deletions(-)

diff --git a/core/lib/Drupal/Component/Utility/Xss.php b/core/lib/Drupal/Component/Utility/Xss.php
index 2c143cddf84b..b0e77605194f 100644
--- a/core/lib/Drupal/Component/Utility/Xss.php
+++ b/core/lib/Drupal/Component/Utility/Xss.php
@@ -2,7 +2,7 @@
 
 namespace Drupal\Component\Utility;
 
-// cspell:ignore ckers kses harnhammar
+// cspell:ignore ckers kses harnhammar rdfa
 
 /**
  * Provides helper to filter for cross-site scripting.
@@ -29,6 +29,46 @@ class Xss {
    */
   protected static $htmlTags = ['a', 'em', 'strong', 'cite', 'blockquote', 'code', 'ul', 'ol', 'li', 'dl', 'dt', 'dd'];
 
+  /**
+   * The default list of safe attributes not sanitized by filter().
+   *
+   * @var array
+   *
+   * @see \Drupal\Component\Utility\Xss::filter()
+   */
+  protected static $safeAttributes = [
+    'title',
+    'alt',
+    'class',
+    'value',
+    'name',
+    'property',
+    'typeof',
+    'rel',
+    'rev',
+    'datetime',
+    'mailto',
+    'media',
+    'sizes',
+  ];
+
+  /**
+   * The default list of Unsafe attributes that must be sanitized by filter().
+   *
+   * @var array
+   *
+   * @see \Drupal\Component\Utility\Xss::filter()
+   */
+  protected static $unSafeAttributes = [
+    'action',
+    'cite',
+    'formaction',
+    'href',
+    'object',
+    'src',
+    'target',
+  ];
+
   /**
    * Filters HTML to prevent cross-site-scripting (XSS) vulnerabilities.
    *
@@ -205,6 +245,7 @@ protected static function attributes($attributes) {
     $attribute_name = '';
     $skip = FALSE;
     $skip_protocol_filtering = FALSE;
+    $enforce_protocol_filtering = FALSE;
 
     while (strlen($attributes) != 0) {
       // Was the last operation successful?
@@ -229,18 +270,16 @@ protected static function attributes($attributes) {
             // starting with "javascript:"). However, for some non-URI
             // attributes performing this filtering causes valid and safe data
             // to be mangled. We prevent this by skipping protocol filtering on
-            // such attributes.
+            // such attributes. Adding check to skip angular attributes (ng).
             // @see \Drupal\Component\Utility\UrlHelper::filterBadProtocol()
             // @see http://www.w3.org/TR/html4/index/attributes.html
-            $skip_protocol_filtering = str_starts_with($attribute_name, 'data-') || in_array($attribute_name, [
-              'title',
-              'alt',
-              'rel',
-              'property',
-              'class',
-              'datetime',
-            ]);
+            $skip_protocol_filtering = str_starts_with($attribute_name, 'data-') ||
+              str_starts_with($attribute_name, 'ng-') ||
+              in_array($attribute_name, static::$safeAttributes);
 
+            // There are also certain attributes that we want to make sure we
+            // filter no matter what.
+            $enforce_protocol_filtering = in_array($attribute_name, static::$unSafeAttributes);
             $working = $mode = 1;
             $attributes = preg_replace('/^[-a-zA-Z][-a-zA-Z0-9]*/', '', $attributes);
           }
@@ -272,7 +311,12 @@ protected static function attributes($attributes) {
           $working = 1;
           // Attribute value, a URL after href= for instance.
           if (preg_match('/^"([^"]*)"(\s+|$)/', $attributes, $match)) {
-            $value = $skip_protocol_filtering ? $match[1] : UrlHelper::filterBadProtocol($match[1]);
+            if ($enforce_protocol_filtering || !$skip_protocol_filtering) {
+              $value = static::filterProtocol($attribute_name, $match[1]);
+            }
+            else {
+              $value = $match[1];
+            }
 
             if (!$skip) {
               $attributes_array[] = "$attribute_name=\"$value\"";
@@ -282,7 +326,12 @@ protected static function attributes($attributes) {
           }
 
           if (preg_match("/^'([^']*)'(\s+|$)/", $attributes, $match)) {
-            $value = $skip_protocol_filtering ? $match[1] : UrlHelper::filterBadProtocol($match[1]);
+            if ($enforce_protocol_filtering || !$skip_protocol_filtering) {
+              $value = static::filterProtocol($attribute_name, $match[1]);
+            }
+            else {
+              $value = $match[1];
+            }
 
             if (!$skip) {
               $attributes_array[] = "$attribute_name='$value'";
@@ -292,7 +341,12 @@ protected static function attributes($attributes) {
           }
 
           if (preg_match("%^([^\s\"']+)(\s+|$)%", $attributes, $match)) {
-            $value = $skip_protocol_filtering ? $match[1] : UrlHelper::filterBadProtocol($match[1]);
+            if ($enforce_protocol_filtering || !$skip_protocol_filtering) {
+              $value = static::filterProtocol($attribute_name, $match[1]);
+            }
+            else {
+              $value = $match[1];
+            }
 
             if (!$skip) {
               $attributes_array[] = "$attribute_name=\"$value\"";
@@ -341,6 +395,33 @@ protected static function needsRemoval(array $html_tags, $elem) {
     return !isset($html_tags[strtolower($elem)]);
   }
 
+  /**
+   * Strips bad protocols from attribute values.
+   *
+   * @param string $name
+   *   The attribute name.
+   * @param string $value
+   *   The attribute value.
+   *
+   * @return string
+   *   The attribute value, stripped of any bad protocols.
+   */
+  protected static function filterProtocol(string $name, string $value): string {
+    // If the attribute is a safe attribute check that it doesn't contain a
+    // protocol. If it does call UrlHelper::stripDangerousProtocols().
+    if (in_array($name, static::$safeAttributes)) {
+      return preg_match('/
+        ^[a-zA-Z0-9]+ # check for any text
+        \: # separated by a colon
+        [a-zA-Z0-9]+$ # followed by any text
+        /',
+        $value) ? UrlHelper::stripDangerousProtocols($value) : $value;
+    }
+    else {
+      return UrlHelper::filterBadProtocol($value);
+    }
+  }
+
   /**
    * Gets the list of HTML tags allowed by Xss::filterAdmin().
    *
diff --git a/core/tests/Drupal/Tests/Component/Utility/XssTest.php b/core/tests/Drupal/Tests/Component/Utility/XssTest.php
index 0f242959ebee..6c024b0ac818 100644
--- a/core/tests/Drupal/Tests/Component/Utility/XssTest.php
+++ b/core/tests/Drupal/Tests/Component/Utility/XssTest.php
@@ -8,10 +8,11 @@
 use Drupal\Component\Utility\UrlHelper;
 use Drupal\Component\Utility\Xss;
 use PHPUnit\Framework\TestCase;
+use Prophecy\PhpUnit\ProphecyTrait;
 
 // cspell:ignore ascript barbaz ckers cript CVEs dynsrc fooÿñ msgbox ncript
 // cspell:ignore nfocus nmedi nosuchscheme nosuchtag onmediaerror scrscriptipt
-// cspell:ignore tascript vbscript
+// cspell:ignore tascript vbscript rdfa
 
 /**
  * XSS Filtering tests.
@@ -30,6 +31,8 @@
  */
 class XssTest extends TestCase {
 
+  use ProphecyTrait;
+
   /**
    * {@inheritdoc}
    */
@@ -509,6 +512,36 @@ public function providerTestAttributes() {
         'Link tag with rel attribute',
         ['a'],
       ],
+      [
+        '<a href="mailto:me@example.com">Drupal</a>',
+        '<a href="mailto:me@example.com">Drupal</a>',
+        'Link tag with rev attribute',
+        ['a'],
+      ],
+      [
+        '<a href="https://www.drupal.org/" rev="section">Drupal</a>',
+        '<a href="https://www.drupal.org/" rev="section">Drupal</a>',
+        'Link tag with mailto href',
+        ['a'],
+      ],
+      [
+        '<a media="print and (resolution:300dpi)">Drupal</a>',
+        '<a media="print and (resolution:300dpi)">Drupal</a>',
+        'Link tag with media attribute',
+        ['a'],
+      ],
+      [
+        '<a sizes="16x16">Drupal</a>',
+        '<a sizes="16x16">Drupal</a>',
+        'Link tag with sizes attribute',
+        ['a'],
+      ],
+      [
+        '<time datetime="2017-02-14">',
+        '<time datetime="2017-02-14">',
+        'Time with datetime attribute',
+        ['time'],
+      ],
       [
         '<span property="dc:subject">Drupal 8: The best release ever.</span>',
         '<span property="dc:subject">Drupal 8: The best release ever.</span>',
@@ -563,6 +596,68 @@ public function providerTestAttributes() {
         'Time with datetime attribute',
         ['time'],
       ],
+      [
+        '<section class="actions-menu-inner" ng-style="{ \'max-height\': maxPanelHeight }" pretty-scrollbar scroll-axis="y" scroll-theme="light"></section>',
+        '<section class="actions-menu-inner" ng-style="{ \'max-height\': maxPanelHeight }" pretty-scrollbar scroll-axis="y" scroll-theme="light"></section>',
+        'Section tag with ng- attribute',
+        ['section'],
+      ],
+      [
+        '<source srcset="image.jpg 1x" media="all and (min-width: 560px) and (max-width: 850px)" type="image/jpeg" />',
+        '<source srcset="image.jpg 1x" media="all and (min-width: 560px) and (max-width: 850px)" type="image/jpeg" />',
+        'Source with media containing breakpoints',
+        ['source'],
+      ],
+      // Test RDFa attributes.
+      [
+        '<img src="http://example.com/foo.jpg" typeof="foaf:Image">',
+        '<img src="http://example.com/foo.jpg" typeof="foaf:Image">',
+        'Image tag with RDFa with namespaced attribute',
+        ['img'],
+      ],
+      [
+        '<img src="http://example.com/foo.jpg" typeof="foaf:bad////value">',
+        '<img src="http://example.com/foo.jpg" typeof="foaf:bad////value">',
+        'Image tag with RDFa with bad with namespaced attribute',
+        ['img'],
+      ],
+      [
+        '<img src="http://example.com/foo.jpg" foo="bar:baz">',
+        '<img src="http://example.com/foo.jpg" foo="baz">',
+        'Image tag with non-RDFa attribute',
+        ['img'],
+      ],
+      [
+        '<h2 property="title">The Title</h2>',
+        '<h2 property="title">The Title</h2>',
+        'H2 tag with RDFa attribute without namespace',
+        ['h2'],
+      ],
+      [
+        '<h2 property="http://purl.org/dc/terms/title">The Title</h2>',
+        '<h2 property="http://purl.org/dc/terms/title">The Title</h2>',
+        'H2 tag with RDFa attribute with URL',
+        ['h2'],
+      ],
+      [
+        '<h2 property="javascript:alert(0);">The Title</h2>',
+        '<h2 property="javascript:alert(0);">The Title</h2>',
+        'H2 tag with RDFa attribute with XSS',
+        ['h2'],
+      ],
+      // Test attributes with colons that should not be filtered out.
+      [
+        '<img src="http://example.com/foo.jpg" title="Example: title" alt="Example: alt">',
+        '<img src="http://example.com/foo.jpg" title="Example: title" alt="Example: alt">',
+        'img tag alt and title attributes with colons in text',
+        ['img'],
+      ],
+      [
+        '<img src="http://example.com/foo.jpg" data-caption="Example: data-caption.">',
+        '<img src="http://example.com/foo.jpg" data-caption="Example: data-caption.">',
+        'img tag with colon in data-caption attribute',
+        ['img'],
+      ],
     ];
   }
 
-- 
GitLab

